# Dowloading list of reference proteomes. This will be used to
rp = get_all_reference_proteomes() |>
dplyr::pull(.data$Proteome_ID)
library(metaverseR)
# Dowloading list of reference proteomes. This will be used to
rp = get_all_reference_proteomes() |>
dplyr::pull(.data$Proteome_ID)
devtools::document()
if (file.exists(destination_fp)) {
# Delete any FASTA file at the output location if it already exists
unlink(destination_fp)
cat("File deleted at", destination_fp, "\n")
}
# making sure organism_ids are unique
organism_ids <- unique(organism_ids)
# Adding any additional specified organism ids to the list
if (!is.null(additonal_organism_ids)) {
organism_ids <- c(organism_ids, additonal_organism_ids)
}
# Dowloading list of reference proteomes. This will be used to
rp = get_all_reference_proteomes() |>
dplyr::pull(.data$Proteome_ID)
problems(rp)
vroom::problems(rp)
rlang::last_trace()
rp = get_all_reference_proteomes()
problems(rp)
vroom::problems(rp)
View(rp)
?readr::read_tsv
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#'
#' Given a vector of kegg ids, get all of the functional information using the
#' KEGG API.
#'
#' @param kegg_ids = kegg ides in the format "hsa:1234"
#'
#' @returns
#' @export
#'
#' @examples
get_kegg_in_batches <- function(kegg_ids, batch_size = 10) {
all_results <- list()
# Split IDs into batches
batches <- split(kegg_ids, ceiling(seq_along(kegg_ids) / batch_size))
for (i in seq_along(batches)) {
message(sprintf("Processing batch %d of %d", i, length(batches)))
batch <- batches[[i]]
# Fetch KEGG entries
entries <- lapply(batch, function(id) {
tryCatch(KEGGREST::keggGet(id), error = function(e) NULL)
})
# Flatten list and remove NULLs
entries <- unlist(entries, recursive = FALSE)
entries <- entries[!sapply(entries, is.null)]
# Process each entry and store results
if (length(entries) > 0) {
results <- purrr::map_dfr(entries, function(entry) {
if (is.null(entry)) return(NULL)  # Handle missing entries gracefully
gene_num <- entry$ENTRY  # Gene ID
org_id <- names(entry$ORGANISM)  # Organism ID
gene_id <- paste0(org_id, ":", gene_num)  # Full gene ID
# Extract KO ID safely
ko <- if (!is.null(entry$ORTHOLOGY)) names(entry$ORTHOLOGY) else NA_character_
# Extract KEGG Pathway
kegg_pathway <- if (!is.null(entry$PATHWAY)) {
paste0(paste0(entry$PATHWAY, " [", names(entry$PATHWAY), "]"), collapse = "; ")
} else {
NA_character_
}
# # Extract BRITE hierarchy
# brite_info <- if (!is.null(entry$BRITE)) {
#   paste0(unlist(entry$BRITE), collapse = "; ")
# } else {
#   NA_character_
# }
# Return extracted info as a tibble
tibble::tibble(
kegg_id = gene_id,
ko = ko,
kegg_pathway = kegg_pathway#,
# brite_info = brite_info
)
})
all_results[[i]] <- results
}
# Avoid hitting KEGG rate limits (3x per second)
Sys.sleep(0.34)
}
# Combine all batch results into a single dataframe
out = dplyr::bind_rows(all_results) |>
# Formatting into a useful format
dplyr::mutate(kegg_pathway_list= stringr::str_split(kegg_pathway, "; ")) |>
tidyr::unnest(kegg_pathway_list) |>
dplyr::mutate(
kegg_pathway = stringr::str_extract(kegg_pathway_list, "^[^\\[]+"),  # Extract pathway name (before bracket)
code = stringr::str_extract(kegg_pathway_list, "\\[([^\\]]+)\\]")  # Extract code (inside brackets)
) |>
dplyr::mutate(
pathway = stringr::str_trim(kegg_pathway),  # Clean up any leading/trailing spaces
code = stringr::str_remove_all(code, "[\\[\\]]")  # Remove brackets from code
) |>
dplyr::select(kegg_pathway,kegg_id,ko,code)
}
insulin = get_kegg_in_batches("hsa:3630")
View(insulin)
insulin = get_eggnog_function("ENOG502S5P5")
?GET
?fromjson
??fromJSOM
?fromJSON
#'
#' Get Eggnog functional go terms given a vector of EGGNOG ids
#'
#' @param eggnog_ids
#'
#' @returns
#' @export
#'
#' @examples
#' insulin = get_eggnog_function("ENOG502S5P5")
get_eggnog_function <- function(eggnog_ids) {
# Initialize an empty results tibble
results <- tibble(
eggnog_id = character(), go_type = character(), go_id = character(),
go_description = character(), evidence_codes = character(),
seq_count = numeric(), frequency = numeric(), annotation_count = numeric()
)
# Loop through each EggNOG ID
for (id in eggnog_ids) {
url <- paste0("http://eggnogapi5.embl.de/nog_data/json/go_terms/", id)
response <- httr::GET(url)
if (status_code(response) == 200) {
data <- jsonlite::fromJSON(content(response, "text",encoding = "UTF-8"))
if ("go_terms" %in% names(data)) {
col_names <- c("go_id", "go_description", "evidence_codes",
"seq_count", "frequency", "annotation_count")
# Extract GO terms per category
go_data <- list(
MF = data$go_terms$`Molecular Function`,
BP = data$go_terms$`Biological Process`,
CC = data$go_terms$`Cellular Component`
)
go_df <- dplyr::bind_rows(lapply(names(go_data), function(go_type) {
if (!is.null(go_data[[go_type]])) {
as.data.frame(go_data[[go_type]]) %>%
setNames(col_names) %>%
dplyr::mutate(
eggnog_id = id, go_type = go_type, .before = 1,
seq_count = as.numeric(seq_count),
frequency = as.numeric(frequency),
annotation_count = as.numeric(annotation_count)
)
} else {
tibble::tibble(eggnog_id = id, go_type = go_type,
go_id = NA_character_,go_description = NA_character_,
evidence_codes = NA_character_,seq_count = NA_real_,
frequency = NA_real_, annotation_count = NA_real_)
}
}))
results <- dplyr::bind_rows(results, go_df)
cat("GO terms downloaded for Eggnog ID:", id, "\n")
} else {
# No GO terms found, add empty row
results <- dplyr::bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Warning: No GO terms found for Eggnog ID:", id, "\n")
}
} else {
# Failed API request, add empty row
results <- bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Error: Request failed for Eggnog ID:", id, "\n")
}
}
out = tibble::as_tibble(results)
}
insulin = get_eggnog_function("ENOG502S5P5")
#'
#' Get Eggnog functional go terms given a vector of EGGNOG ids
#'
#' @param eggnog_ids
#'
#' @returns
#' @export
#'
#' @examples
#' insulin = get_eggnog_function("ENOG502S5P5")
get_eggnog_function <- function(eggnog_ids) {
# Initialize an empty results tibble
results <- tibble::tibble(
eggnog_id = character(), go_type = character(), go_id = character(),
go_description = character(), evidence_codes = character(),
seq_count = numeric(), frequency = numeric(), annotation_count = numeric()
)
# Loop through each EggNOG ID
for (id in eggnog_ids) {
url <- paste0("http://eggnogapi5.embl.de/nog_data/json/go_terms/", id)
response <- httr::GET(url)
if (status_code(response) == 200) {
data <- jsonlite::fromJSON(content(response, "text",encoding = "UTF-8"))
if ("go_terms" %in% names(data)) {
col_names <- c("go_id", "go_description", "evidence_codes",
"seq_count", "frequency", "annotation_count")
# Extract GO terms per category
go_data <- list(
MF = data$go_terms$`Molecular Function`,
BP = data$go_terms$`Biological Process`,
CC = data$go_terms$`Cellular Component`
)
go_df <- dplyr::bind_rows(lapply(names(go_data), function(go_type) {
if (!is.null(go_data[[go_type]])) {
as.data.frame(go_data[[go_type]]) %>%
setNames(col_names) %>%
dplyr::mutate(
eggnog_id = id, go_type = go_type, .before = 1,
seq_count = as.numeric(seq_count),
frequency = as.numeric(frequency),
annotation_count = as.numeric(annotation_count)
)
} else {
tibble::tibble(eggnog_id = id, go_type = go_type,
go_id = NA_character_,go_description = NA_character_,
evidence_codes = NA_character_,seq_count = NA_real_,
frequency = NA_real_, annotation_count = NA_real_)
}
}))
results <- dplyr::bind_rows(results, go_df)
cat("GO terms downloaded for Eggnog ID:", id, "\n")
} else {
# No GO terms found, add empty row
results <- dplyr::bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Warning: No GO terms found for Eggnog ID:", id, "\n")
}
} else {
# Failed API request, add empty row
results <- bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Error: Request failed for Eggnog ID:", id, "\n")
}
}
out = tibble::as_tibble(results)
}
insulin = get_eggnog_function("ENOG502S5P5")
#'
#' Get Eggnog functional go terms given a vector of EGGNOG ids
#'
#' @param eggnog_ids
#'
#' @returns
#' @export
#'
#' @examples
#' insulin = get_eggnog_function("ENOG502S5P5")
get_eggnog_function <- function(eggnog_ids) {
# Initialize an empty results tibble
results <- tibble::tibble(
eggnog_id = character(), go_type = character(), go_id = character(),
go_description = character(), evidence_codes = character(),
seq_count = numeric(), frequency = numeric(), annotation_count = numeric()
)
# Loop through each EggNOG ID
for (id in eggnog_ids) {
url <- paste0("http://eggnogapi5.embl.de/nog_data/json/go_terms/", id)
response <- httr::GET(url)
if (httr::status_code(response) == 200) {
data <- jsonlite::fromJSON(content(response, "text",encoding = "UTF-8"))
if ("go_terms" %in% names(data)) {
col_names <- c("go_id", "go_description", "evidence_codes",
"seq_count", "frequency", "annotation_count")
# Extract GO terms per category
go_data <- list(
MF = data$go_terms$`Molecular Function`,
BP = data$go_terms$`Biological Process`,
CC = data$go_terms$`Cellular Component`
)
go_df <- dplyr::bind_rows(lapply(names(go_data), function(go_type) {
if (!is.null(go_data[[go_type]])) {
as.data.frame(go_data[[go_type]]) %>%
setNames(col_names) %>%
dplyr::mutate(
eggnog_id = id, go_type = go_type, .before = 1,
seq_count = as.numeric(seq_count),
frequency = as.numeric(frequency),
annotation_count = as.numeric(annotation_count)
)
} else {
tibble::tibble(eggnog_id = id, go_type = go_type,
go_id = NA_character_,go_description = NA_character_,
evidence_codes = NA_character_,seq_count = NA_real_,
frequency = NA_real_, annotation_count = NA_real_)
}
}))
results <- dplyr::bind_rows(results, go_df)
cat("GO terms downloaded for Eggnog ID:", id, "\n")
} else {
# No GO terms found, add empty row
results <- dplyr::bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Warning: No GO terms found for Eggnog ID:", id, "\n")
}
} else {
# Failed API request, add empty row
results <- bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Error: Request failed for Eggnog ID:", id, "\n")
}
}
out = tibble::as_tibble(results)
}
insulin = get_eggnog_function("ENOG502S5P5")
#'
#' Get Eggnog functional go terms given a vector of EGGNOG ids
#'
#' @param eggnog_ids
#'
#' @returns
#' @export
#'
#' @examples
#' insulin = get_eggnog_function("ENOG502S5P5")
get_eggnog_function <- function(eggnog_ids) {
# Initialize an empty results tibble
results <- tibble::tibble(
eggnog_id = character(), go_type = character(), go_id = character(),
go_description = character(), evidence_codes = character(),
seq_count = numeric(), frequency = numeric(), annotation_count = numeric()
)
# Loop through each EggNOG ID
for (id in eggnog_ids) {
url <- paste0("http://eggnogapi5.embl.de/nog_data/json/go_terms/", id)
response <- httr::GET(url)
if (httr::status_code(response) == 200) {
data <- jsonlite::fromJSON(httr::content(response, "text",encoding = "UTF-8"))
if ("go_terms" %in% names(data)) {
col_names <- c("go_id", "go_description", "evidence_codes",
"seq_count", "frequency", "annotation_count")
# Extract GO terms per category
go_data <- list(
MF = data$go_terms$`Molecular Function`,
BP = data$go_terms$`Biological Process`,
CC = data$go_terms$`Cellular Component`
)
go_df <- dplyr::bind_rows(lapply(names(go_data), function(go_type) {
if (!is.null(go_data[[go_type]])) {
as.data.frame(go_data[[go_type]]) %>%
setNames(col_names) %>%
dplyr::mutate(
eggnog_id = id, go_type = go_type, .before = 1,
seq_count = as.numeric(seq_count),
frequency = as.numeric(frequency),
annotation_count = as.numeric(annotation_count)
)
} else {
tibble::tibble(eggnog_id = id, go_type = go_type,
go_id = NA_character_,go_description = NA_character_,
evidence_codes = NA_character_,seq_count = NA_real_,
frequency = NA_real_, annotation_count = NA_real_)
}
}))
results <- dplyr::bind_rows(results, go_df)
cat("GO terms downloaded for Eggnog ID:", id, "\n")
} else {
# No GO terms found, add empty row
results <- dplyr::bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Warning: No GO terms found for Eggnog ID:", id, "\n")
}
} else {
# Failed API request, add empty row
results <- bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Error: Request failed for Eggnog ID:", id, "\n")
}
}
out = tibble::as_tibble(results)
}
insulin = get_eggnog_function("ENOG502S5P5")
#'
#' Get Eggnog functional go terms given a vector of EGGNOG ids
#'
#' @param eggnog_ids
#'
#' @returns
#' @export
#'
#' @examples
#' insulin = get_eggnog_function("ENOG502S5P5")
get_eggnog_function <- function(eggnog_ids) {
# Initialize an empty results tibble
results <- tibble::tibble(
eggnog_id = character(), go_type = character(), go_id = character(),
go_description = character(), evidence_codes = character(),
seq_count = numeric(), frequency = numeric(), annotation_count = numeric()
)
# Loop through each EggNOG ID
for (id in eggnog_ids) {
url <- paste0("http://eggnogapi5.embl.de/nog_data/json/go_terms/", id)
response <- httr::GET(url)
if (httr::status_code(response) == 200) {
data <- jsonlite::fromJSON(httr::content(response, "text",encoding = "UTF-8"))
if ("go_terms" %in% names(data)) {
col_names <- c("go_id", "go_description", "evidence_codes",
"seq_count", "frequency", "annotation_count")
# Extract GO terms per category
go_data <- list(
MF = data$go_terms$`Molecular Function`,
BP = data$go_terms$`Biological Process`,
CC = data$go_terms$`Cellular Component`
)
go_df <- dplyr::bind_rows(lapply(names(go_data), function(go_type) {
if (!is.null(go_data[[go_type]])) {
as.data.frame(go_data[[go_type]]) |>
setNames(col_names) |>
dplyr::mutate(
eggnog_id = id, go_type = go_type, .before = 1,
seq_count = as.numeric(seq_count),
frequency = as.numeric(frequency),
annotation_count = as.numeric(annotation_count)
)
} else {
tibble::tibble(eggnog_id = id, go_type = go_type,
go_id = NA_character_,go_description = NA_character_,
evidence_codes = NA_character_,seq_count = NA_real_,
frequency = NA_real_, annotation_count = NA_real_)
}
}))
results <- dplyr::bind_rows(results, go_df)
cat("GO terms downloaded for Eggnog ID:", id, "\n")
} else {
# No GO terms found, add empty row
results <- dplyr::bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Warning: No GO terms found for Eggnog ID:", id, "\n")
}
} else {
# Failed API request, add empty row
results <- bind_rows(results, tibble(
eggnog_id = id, go_type = NA_character_, go_id = NA_character_,
go_description = NA_character_, evidence_codes = NA_character_,
seq_count = NA_real_, frequency = NA_real_, annotation_count = NA_real_
))
cat("Error: Request failed for Eggnog ID:", id, "\n")
}
}
out = tibble::as_tibble(results)
}
insulin = get_eggnog_function("ENOG502S5P5")
View(insulin)
View(insulin)
#' and summarise.
#'
#' @param pg_matrix_fp pg_matrix output of diann
#' @param outdir out directory
#'
#' @returns tsv at output directory location
#' @export
#'
#' @examples
#' insulin = get_annotations_from_uniprot("P01308")
get_annotations_from_uniprot = function(uniprot_ids){
columns = "organism_id,accession,go,xref_kegg,xref_eggnog,cc_subcellular_location"
# We can get both GO and Kegg data from the uniprot API
go_kegg_data = annotate_uniprot_ids(uniprot_ids,
columns = columns,
batch_size = 100) |>
dplyr::mutate(
go = dplyr::na_if(go, " "),
go = dplyr::na_if(go, ""),
xref_kegg = dplyr::na_if(xref_kegg, " "),
xref_kegg = dplyr::na_if(xref_kegg, ""),
xref_eggnog = dplyr::na_if(xref_eggnog, " "),
xref_eggnog = dplyr::na_if(xref_eggnog, "")
)
return(go_kegg_data)
}
insulin = get_annotations_from_uniprot("P01308")
View(insulin)
t = get_annotations_from_uniprot("P47340")
View(t)
View(insulin)
